import os
import datetime
import pandas as pd
import uuid
from dotenv import load_dotenv
from passlib.hash import bcrypt
from sqlalchemy import asc
from telegram import ReplyKeyboardMarkup, Update
from datetime import timedelta

from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)

from init_db import SessionLocal, User, Schedule, UserSession


# ===================== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ =====================
def get_user_by_telegram(telegram_id: int):
    """–í–µ—Ä–Ω—É—Ç—å User –ø–æ telegram_id (—á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É user_sessions)."""
    s = SessionLocal()
    try:
        sess = s.query(UserSession).filter_by(telegram_id=str(telegram_id)).first()
        if not sess:
            return None
        user = s.query(User).filter_by(id=sess.user_id).first()
        return user
    finally:
        s.close()

def create_user_session(user_id: str, telegram_id: int):
    """–°–æ–∑–¥–∞—ë—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é: –æ–¥–∏–Ω telegram_id => –æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è.
       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False."""
    s = SessionLocal()
    try:
        # –µ—Å–ª–∏ —ç—Ç–æ—Ç telegram_id —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É user ‚Äî —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
        s.query(UserSession).filter_by(telegram_id=str(telegram_id)).delete()
        us = UserSession(id=str(uuid.uuid4()), user_id=user_id, telegram_id=str(telegram_id))
        s.add(us)
        s.commit()
        return True
    except Exception as e:
        s.rollback()
        return False
    finally:
        s.close()


def clear_user_session(telegram_id: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ telegram_id. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª."""
    s = SessionLocal()
    try:
        deleted = s.query(UserSession).filter_by(telegram_id=str(telegram_id)).delete()
        s.commit()
        return bool(deleted)
    finally:
        s.close()

def get_user_by_login(login: str):
    s = SessionLocal()
    try:
        return s.query(User).filter_by(login=login).first()
    finally:
        s.close()



def verify_password(user, password: str) -> bool:
    if not user:
        return False
    return bcrypt.verify(password, user.password_hash)


# ===================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ =====================
MAIN_KEYBOARD = [
    ["–ü–ù", "–í–¢", "–°–†"],
    ["–ß–¢", "–ü–¢", "–ù–∞ —Å–µ–≥–æ–¥–Ω—è"],
    ["–ù–∞ –∑–∞–≤—Ç—Ä–∞", "–ù–∞ –Ω–µ–¥–µ–ª—é", "–í—ã–π—Ç–∏"]
]

def main_keyboard():
    return ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)


# ===================== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è =====================
LOGIN, PASSWORD = range(2)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user_by_telegram(update.effective_user.id)
    if user:
        await update.message.reply_text(
            f"–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {user.name_tuter} ({user.role})",
            reply_markup=main_keyboard()
        )
        return
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /login")

async def cmd_login_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    return LOGIN

async def login_receive_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['login_try'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return PASSWORD

async def login_receive_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    login = context.user_data.get('login_try')
    password = update.message.text.strip()
    user = get_user_by_login(login)
    if not user:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END
    if not verify_password(user, password):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return ConversationHandler.END

    # –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
    create_user_session(user.id, update.effective_user.id)
    await update.message.reply_text(
        f"–£—Å–ø–µ—à–Ω–æ! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user.name_tuter} ({user.role}).",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

async def cmd_logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cleared = clear_user_session(update.effective_user.id)
    if cleared:
        await update.message.reply_text("–í—ã –≤—ã—à–ª–∏. –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.")

login_conv = ConversationHandler(
    entry_points=[CommandHandler('login', cmd_login_start)],
    states={
        LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_receive_login)],
        PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_receive_password)],
    },
    fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)],
)


# ===================== –†–∞–±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º =====================
WEEK_MAP_NUM_TO_RU = {1: "–ü–ù", 2: "–í–¢", 3: "–°–†", 4: "–ß–¢", 5: "–ü–¢"}

def ru_weekday_from_isoweekday(n: int):
    return WEEK_MAP_NUM_TO_RU.get(n)

def get_schedule_for_teacher(teacher_name: str, weekday_ru: str):
    s = SessionLocal()
    try:
        return s.query(Schedule).filter_by(weekday=weekday_ru, teacher=teacher_name).order_by(asc(Schedule.time_start)).all()
    finally:
        s.close()

def get_schedule_for_class(class_name: str, weekday_ru: str):
    s = SessionLocal()
    try:
        return s.query(Schedule).filter_by(weekday=weekday_ru, class_name=class_name).order_by(asc(Schedule.time_start)).all()
    finally:
        s.close()


def format_schedule_rows(rows, role):
    lines = []
    
    for i, r in enumerate(rows, start=1):
        ts = str(r.time_start or '')
        te = str(r.time_end or '')
        period = f"{ts}‚Äì{te}" if te else ts

        if role == 'student':
            parts = [f"{i}. <b>{period}</b> | {r.subject or ''}"]
            if r.teacher:
                parts.append(f"üìö<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {r.teacher}")
            if r.cabinet:
                parts.append(f"üè´<b>–ö–∞–±–∏–Ω–µ—Ç:</b> {r.cabinet}")
        elif role == 'teacher':
            parts = [f"{i}. <b>{period}</b> | {r.subject or ''}"]
            if r.class_name:
                parts.append(f"üßíüèº<b>–ö–ª–∞—Å—Å:</b> {r.class_name}")
            if r.cabinet:
                parts.append(f"üè´<b>–ö–∞–±–∏–Ω–µ—Ç:</b> {r.cabinet}")
        else:
            parts = [f"{i}. {period} | {r.subject or ''}"]

        lines.append("\n".join(parts))

    return "\n\n".join(lines) if lines else "–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å."



def format_schedule_with_header(rows, role, date_obj):
    weekday_en = date_obj.strftime("%A")
    weekday_ru = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }[weekday_en]

    header = f"<b>{weekday_ru}. {date_obj.strftime('%d.%m')}</b>"
    schedule_text = format_schedule_rows(rows, role)

    return f"{header}\n{schedule_text}"

from datetime import datetime, timedelta

def format_schedule_rows(rows, role):
    lines = []
    
    for i, r in enumerate(rows, start=1):
        ts = str(r.time_start or '')
        te = str(r.time_end or '')
        period = f"{ts}‚Äì{te}" if te else ts

        if role == 'student':
            parts = [f"{i}. <b>{period}</b> | {r.subject or ''}"]
            if r.teacher:
                parts.append(f"üìö<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {r.teacher}")
            if r.cabinet:
                parts.append(f"üè´<b>–ö–∞–±–∏–Ω–µ—Ç:</b> {r.cabinet}")
        elif role == 'teacher':
            parts = [f"{i}. <b>{period}</b> | {r.subject or ''}"]
            if r.class_name:
                parts.append(f"üßíüèº<b>–ö–ª–∞—Å—Å:</b> {r.class_name}")
            if r.cabinet:
                parts.append(f"üè´<b>–ö–∞–±–∏–Ω–µ—Ç:</b> {r.cabinet}")
        else:
            parts = [f"{i}. {period} | {r.subject or ''}"]

        lines.append("\n".join(parts))

    return "\n\n".join(lines) if lines else "–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å."


def format_schedule_with_header(rows, role, date_obj):
    weekday_en = date_obj.strftime("%A")
    weekday_ru = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }[weekday_en]

    header = f"<b>{weekday_ru}. {date_obj.strftime('%d.%m')}</b>"
    schedule_text = format_schedule_rows(rows, role)

    return f"{header}\n{schedule_text}"


async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE): 
    text = update.message.text.strip()
    user = get_user_by_telegram(update.effective_user.id)
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /login")
        return

    # –°–µ–≥–æ–¥–Ω—è
    if text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
        date_obj = datetime.today().date()
        weekday_ru = ru_weekday_from_isoweekday(date_obj.isoweekday())
        if not weekday_ru:
            await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π.")
            return

    # –ó–∞–≤—Ç—Ä–∞
    elif text == "–ù–∞ –∑–∞–≤—Ç—Ä–∞":
        date_obj = (datetime.today() + timedelta(days=1)).date()
        weekday_ru = ru_weekday_from_isoweekday(date_obj.isoweekday())
        if not weekday_ru:
            await update.message.reply_text("–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π.")
            return

    # –ù–µ–¥–µ–ª—è
    elif text == "–ù–∞ –Ω–µ–¥–µ–ª—é":
        for offset, d in enumerate(["–ü–ù","–í–¢","–°–†","–ß–¢","–ü–¢"]):
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
            today = datetime.today()
            weekday_num = today.isoweekday()
            delta = offset - (weekday_num - 1)
            date_obj = (today + timedelta(days=delta)).date()

            if user.role == 'teacher':
                rows = get_schedule_for_teacher(user.name_tuter, d)
            else:
                rows = get_schedule_for_class(user.name_tuter, d)

            if rows:
                await update.message.reply_text(
                    text=format_schedule_with_header(rows, user.role, date_obj),
                    parse_mode="HTML"
                )
        return

    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å (–ü–ù‚Äì–ü–¢)
    elif text in ["–ü–ù","–í–¢","–°–†","–ß–¢","–ü–¢"]:
        today = datetime.today()
        weekday_num = today.isoweekday()  # 1=–ü–ù
        target_num = ["–ü–ù","–í–¢","–°–†","–ß–¢","–ü–¢"].index(text) + 1
        delta = target_num - weekday_num
        date_obj = (today + timedelta(days=delta)).date()
        weekday_ru = text

    elif text == "–í—ã–π—Ç–∏":
        await cmd_logout(update, context)
        return
    else:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if user.role == 'teacher':
        rows = get_schedule_for_teacher(user.name_tuter, weekday_ru)
    elif user.role == 'student':
        rows = get_schedule_for_class(user.name_tuter, weekday_ru)
    else:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è–º –∏ —É—á–µ–Ω–∏–∫–∞–º.")
        return

    await update.message.reply_text(
        text=format_schedule_with_header(rows, user.role, date_obj),
        parse_mode="HTML"
    )



# ===================== –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–∞) =====================
UPLOADS_DIR = os.path.join(os.path.dirname(__file__), "uploads")
os.makedirs(UPLOADS_DIR, exist_ok=True)

import uuid
import pandas as pd
from sqlalchemy.orm import Session


def normalize_class(value):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞"""
    if pd.isna(value) or str(value).strip() == "":
        return None
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, —É–±–∏—Ä–∞–µ–º .0
        return str(int(float(value)))
    except (ValueError, TypeError):
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "11–ê")
        return str(value).strip()


def normalize_teacher(value):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    if pd.isna(value) or str(value).strip() == "":
        return None  # –¥–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–≥–æ —É—á–∏—Ç–µ–ª—è
    return str(value).strip()


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user_by_telegram(update.effective_user.id)
    if not user or user.role != 'admin':
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        return

    doc = update.message.document
    if not doc:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .xlsx")
        return
    if not (doc.file_name.endswith(".xlsx") or doc.file_name.endswith(".xls")):
        await update.message.reply_text("–ù—É–∂–µ–Ω —Ñ–∞–π–ª .xlsx")
        return

    local_path = os.path.join(UPLOADS_DIR, doc.file_name)
    file = await doc.get_file()
    await file.download_to_drive(custom_path=local_path)

    df = pd.read_excel(local_path)
    df.columns = [c.strip().lower().replace(" ", "_") for c in df.columns]

    required_columns = {'subject', 'weekday', 'time_start', 'class_name'}
    if not required_columns.issubset(df.columns):
        raise ValueError(
            f"–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: {required_columns - set(df.columns)}. "
            f"–ù–∞–π–¥–µ–Ω—ã: {list(df.columns)}"
        )

    def normalize_class_name(val):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞: 9.0 -> '9', 10 -> '10', '9–ê' –æ—Å—Ç–∞—ë—Ç—Å—è '9–ê'"""
        import math
        if pd.isna(val):
            return None
        if isinstance(val, int):
            return str(val)
        if isinstance(val, float):
            if math.isfinite(val) and val.is_integer():
                return str(int(val))
            return str(val).strip()
        s = str(val).strip()
        try:
            f = float(s.replace(',', '.'))
            if f.is_integer():
                return str(int(f))
        except Exception:
            pass
        return s

    import datetime as _dt

    def to_time(val):
        if pd.isna(val):
            return None
        if hasattr(val, 'time'):
            return val.time()
        if isinstance(val, _dt.time):
            return val
        try:
            return pd.to_datetime(val).time()
        except Exception:
            return None

    s = SessionLocal()
    try:
        # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        s.query(Schedule).delete()
        s.commit()

        for _, row in df.iterrows():
            ts = to_time(row.get('time_start'))
            te = to_time(row.get('time_end')) if 'time_end' in df.columns else None
            class_name_normalized = normalize_class_name(row.get('class_name'))

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ teacher
            teacher_value = row.get('teacher')
            teacher_value = None if pd.isna(teacher_value) else str(teacher_value).strip()

            teachers = []
            if teacher_value:
                tv = teacher_value.lower()
                if tv == "–≤—Å–µ":
                    teachers = s.query(User).filter(User.role == 'teacher').all()
                elif tv == "–º–ª–∞–¥—à–∞—è —à–∫–æ–ª–∞":
                    teachers = s.query(User).filter(User.role == 'teacher', User.is_junior == True).all()
                elif tv == "—Å—Ç–∞—Ä—à–∞—è —à–∫–æ–ª–∞":
                    teachers = s.query(User).filter(User.role == 'teacher', User.is_senior == True).all()
                else:
                    t = s.query(User).filter(User.role == 'teacher', User.name_tuter == teacher_value).first()
                    teachers = [t] if t else []

            # –µ—Å–ª–∏ –µ—Å—Ç—å —É—á–∏—Ç–µ–ª—è ‚Üí —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
            if teachers:
                for t in teachers:
                    sch = Schedule(
                        id=str(uuid.uuid4()),
                        time_start=ts.strftime("%H:%M") if ts else None,
                        time_end=te.strftime("%H:%M") if te else None,
                        cabinet=None if pd.isna(row.get('cabinet')) else str(row.get('cabinet')).strip(),
                        teacher=t.name_tuter if t else None,
                        class_name=class_name_normalized,
                        weekday=str(row.get('weekday')).strip() if not pd.isna(row.get('weekday')) else None,
                        subject=str(row.get('subject')).strip() if not pd.isna(row.get('subject')) else None
                    )
                    s.add(sch)
            else:
                # –¥–∞–∂–µ –µ—Å–ª–∏ teacher –Ω–µ—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ —É—á–∏—Ç–µ–ª—è
                sch = Schedule(
                    id=str(uuid.uuid4()),
                    time_start=ts.strftime("%H:%M") if ts else None,
                    time_end=te.strftime("%H:%M") if te else None,
                    cabinet=None if pd.isna(row.get('cabinet')) else str(row.get('cabinet')).strip(),
                    teacher=None,
                    class_name=class_name_normalized,
                    weekday=str(row.get('weekday')).strip() if not pd.isna(row.get('weekday')) else None,
                    subject=str(row.get('subject')).strip() if not pd.isna(row.get('subject')) else None
                )
                s.add(sch)

        s.commit()
        await update.message.reply_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Ç–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        s.rollback()
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
    finally:
        s.close()



# ===================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====================
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", cmd_start))
app.add_handler(login_conv)
app.add_handler(CommandHandler("logout", cmd_logout))
app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_choice))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
app.run_polling()
